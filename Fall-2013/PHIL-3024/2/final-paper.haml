!!!
%html
  %head
    %title PHIL-2115: First Paper
    %meta{:name => "author", :content => "Miles Sandlar"}
    %meta{:name => "date", :content => "14-09-13"}
    %link{:rel => "stylesheet", :type => "text/css", :href => "format.css"}
  %body
    #header
      Miles Sandlar 
      %br
      December 13, 2013
      %br
      Professor Pitt
      %br
      PHIL-3024
    #title Bridging the Gap between Programming and Computiner
   
    
    %p I cringe when I hear someone claim in earnest,  "I am not programmer". My distaste does not stem from my own self-identification as a programmer (among other things), but rather a larger cultural mis-understanding of the gap in the analgoy between computing and programming. What I refer to an overly narrow understanding of the capabilities of us all in an age in which we are immersed in a world of computing. A maxim of my argument would not be understood as "we should all be programmers", but rather "we already all are programmers".  Why I say we already all are programmers is that I see a substantially smaller distance between the analagous of programming and computing 
    
    I simply wish to demystify and provide conceptual ground for understanding programming  in relation to computing. A normative claim, I believe we place far too much boundary between computing and programming. I hope to show a sense of close analogy between programming and computing to my readers such that either one could be seen as interchangable.


    %h2 I. Technologies as Tools
    %p In order to grasp the relationship between computing and programming, first we ought understand the larger category both constructs are subsumed beneath, technology. So let us then ask: what is technology? A common sense interpretation might suggest that technology is a set of <i>tools</i> or <i>means</i> which assist us in accomplishing some <i>goals</i> or <i>ends</i>. For example, if I have the goal of opening a bottle of beer, I might accomplish this goal by utilizing the technology, tool, or mean of a bottle opener to remove the cap from its bottle. It should be noted although, that while technology is often understood in a "physical" sense, technology should be understood to include not only "physical" tools or means, but additionally include "social" or "mental" constructs.  In Joseph Pitt's book, <i>Thinking About Technology</i>, he elaborates on this notion by mentioning that while historically technology "has been characterized only as mechanical tools", this notion is flawed as technology is also inclusive of "social phenonmena". He goes on to suggest that "governments, organizations, and hierarchies" are tools and technologies much in the same way physical objects such as hammers are tools and technology. 
    
    %p We need now ask though, is understanding technology-as-tools a wide enough notion for critically assessing computing and programming in context as technology? I fear not, namely, because while both constructs (computing and programming) are "social phenomena" or social tools in the notion of "social-computing", they are not "things" in the same sense that governments and organizations are. To be more specific, computing and programming appear more as "modes" of interaction with a physical device (computer) in the physical world than are social phenomena set to reach goals jointly by groups of humans.  As such, we need step back and realize that by asking the naive question "what is technology?", we are really conflating two smaller questions. Up until now, we have addressed the question of trying to understand "what 'things' are technology?", however we also must concern ourselves with a secondary question, namely: "what is the social context or the way in which we employ 'things' that are technology?"To address this second question, or to understand "technology" in the sense of the word as a verb, we can quickly understand two categories or social contexts in which we employ technology: 1) we make technologies and 2) we use technologies. These two simple categories strongly re-enforcing the technology-as-tools notion developed prior and help us put into context questions of "use" and "making" technology separately. As it would appear, the two categories or contexts in which technology is employed are relativly un-related.  For example, I don't know how my car was constructed, but I know how to drive it.  Contrarily, pencil makers know how to chop, cut, and craft a tree into a collection of pencils, but are not concerned with what is written by using the pencil.  

    %p But are the contexts of "use" and "making" of technology really as seperate as they seem?  Langdon Winner in "Technologies as Forms of Life" addresses this question in suggesting that in "mode of use" technologies are viewed simplistically, having with their users having "little interest in or need to know about the materials, principles, or procedures" needed to create the technology in question. He then explains technology-as-tools and technology's "use" context being seperate from "making" is the view which gives technologies their seemingly ambivalent moral quality.  He provides the example that he can use a knife to "slice a loaf of bread or to stab the next person that walks by" and that technologies can be used "well or poorly and for good or bad purposes". How does this relate and why does it matter? Imagine that the knife in Winner's example is specified to be a plastic butter knife rather than a metal steak knife. The example looses its vivacity becase the "making" of the technology in question carries with it implications on how it can be used.  As such, we find by viewing technology-as-tools and separating our technological contexts into "use" and "making" we necessarily dismiss the cross-over and how the two contexts ifluence one another. Winner describes the idea of technology-as-tools as an overly narrow-minded philosophy that need "be overcome if a critical philosphy of technology is to move ahead" (105).  
    
    %h2 II. Technologies as Forms of Life: Tools and Worlds
    %p Viewing technologies as tools, Winner thinks is a mistake. His project in "Technologies as Forms of Life" in many ways parallels his infamous "Do Artifacts Have Politics?". His seminal work has a large flexible interprative quality, however he puts his disposition nicely as:

    %blockquote
      "My belief that we ought attend more closely to technical objects themselves is not to say that we can ignore the contexts in which those objects are situated. A ship at sea may well require, as Plato and Engels insited, a single capatin and obdeiant crew. But a shipt out of service, parked at the dock, needs only a caretaker

    %p In this quote, Winner is reffering to earlier in his article in which he illustrates Plato and Engel's employment of a "ship" metaphor to justify some context of authority surrounding the ship. Without develing too deeply into the details, the basic idea is that a ship at sea <i>requires</i> a strong captain and obiendent crew. The reason the ship <i>requires</i> a captain and crew is not out of necessary association, but is more a <i>practical necessity</i>, such that it simply runs best that way. The technology in question, the ship, brings with it a certain context, or social relation in relation to the technology.

    %p I mention this example because it is incredibly revealing of what I need show before proceeding: technology is a relation between tools and their worlds. Or in other words, the making and the using of technologies are intricately related projects. Often they power one another. Winner in both his aformentioned articles emphasizes this strongly in a call to question not only the technology as a 'thing' itself but also the world it embodies.  Winner provides in "Technologies as Forms of Life" an extension of clarifcation of this ideal in borrowing WIttgenstein's concept of a "form of life" in that he expresses that technoloogies "become woven into the texture of everday existence, the devices, techniques, and systems we adopt shed their tool-like qualities to become part of our very humanity". What Winner is suggesting is not only that we use technology as means as previously explored, but rather that we are living <i>in</i> technology and <i>creating</i> technology. Analaglies to this philosophical investigation into technology can be seen exhibited in numerous other authors in the philosophy of technology, previosouly mentioned author Pitt describes such phenomena by defining technology as "humanity at work". Heidigger as well, if you can see past his terminology in the Question Concerning Technology, laregly argues for a call to consider the "worlds" technologies embodies. 

    %p The notion of technology as tools and the worlds in assocition with those tools is what I am getting at here. For our purposes worth

    %h2 III. Interfaces and The World of Computing
    %p Computers can be understood physically, as stacks of interfaces connected to one another. The software whiyour computer is just a bunch of interfaces that hook into one another (often called <i>software</i>) with the base level of all of the interfaces representing simple on/off switches, 0s and 1s. Our software, or stacks of interfaces, allow us to translate a certain set of 0s or 1s into different sets of 0s and 1s. This process is repreated over and over again, and that is the world which is computing.

    %p However, the interfaces 
    
    through the means of our abstracted stacks of interfaces to translate into different sets of 0s and 1s.

The "worlds" in which interfaces participate can connect humans-to-machine or machine-to-machine. 


    %p Computing is often viewed as a large construct which subsumes programming. Many people in modern age <i>use</i> computers, but a very small sub-set of computer users would call themselves "programmers". The reason why this is because most computer-users do not use what could be interpreted as "programming interfaces". To unpack this claim, let us first consider what an "interface" is.

    believe primarily to be at the helm of the widespread adoption of graphical user interfaces (GUIs). 


    %p With our understanding of technologies as encompassing the interplay of both tools and their worlds established in (II), I now wish offer some novel insight into the worlds surrounding both programing and computing. Without explicatly defining programming, we can ask: what is programming opposite to? To this question the answer
    %p With what was established prior, grokking what I am about to say 



    #works-cited 
      .title Works Cited
      .citation Biletzki, Anat, and Matar, "Ludwig Wittgenstein", <i>The Stanford Encyclopedia of Philosophy</i> (Summer 2011 Edition), Edward N. Zalta (ed.), URL = &lt;http://plato.stanford.edu/archives/sum2011/entries/wittgenstein/&gt;.
